**Schema (PostgreSQL v13)**

    CREATE SCHEMA dannys_diner;
    SET search_path = dannys_diner;
    
    CREATE TABLE sales (
      "customer_id" VARCHAR(1),
      "order_date" DATE,
      "product_id" INTEGER
    );
    
    INSERT INTO sales
      ("customer_id", "order_date", "product_id")
    VALUES
      ('A', '2021-01-01', '1'),
      ('A', '2021-01-01', '2'),
      ('A', '2021-01-07', '2'),
      ('A', '2021-01-10', '3'),
      ('A', '2021-01-11', '3'),
      ('A', '2021-01-11', '3'),
      ('B', '2021-01-01', '2'),
      ('B', '2021-01-02', '2'),
      ('B', '2021-01-04', '1'),
      ('B', '2021-01-11', '1'),
      ('B', '2021-01-16', '3'),
      ('B', '2021-02-01', '3'),
      ('C', '2021-01-01', '3'),
      ('C', '2021-01-01', '3'),
      ('C', '2021-01-07', '3');
     
    
    CREATE TABLE menu (
      "product_id" INTEGER,
      "product_name" VARCHAR(5),
      "price" INTEGER
    );
    
    INSERT INTO menu
      ("product_id", "product_name", "price")
    VALUES
      ('1', 'sushi', '10'),
      ('2', 'curry', '15'),
      ('3', 'ramen', '12');
      
    
    CREATE TABLE members (
      "customer_id" VARCHAR(1),
      "join_date" DATE
    );
    
    INSERT INTO members
      ("customer_id", "join_date")
    VALUES
      ('A', '2021-01-07'),
      ('B', '2021-01-09');

---

**Query #1**

    SELECT *
    FROM dannys_diner.menu;

| product_id | product_name | price |
| ---------- | ------------ | ----- |
| 1          | sushi        | 10    |
| 2          | curry        | 15    |
| 3          | ramen        | 12    |

---
**Query #2**

    SELECT *
    FROM dannys_diner.sales;

| customer_id | order_date               | product_id |
| ----------- | ------------------------ | ---------- |
| A           | 2021-01-01T00:00:00.000Z | 1          |
| A           | 2021-01-01T00:00:00.000Z | 2          |
| A           | 2021-01-07T00:00:00.000Z | 2          |
| A           | 2021-01-10T00:00:00.000Z | 3          |
| A           | 2021-01-11T00:00:00.000Z | 3          |
| A           | 2021-01-11T00:00:00.000Z | 3          |
| B           | 2021-01-01T00:00:00.000Z | 2          |
| B           | 2021-01-02T00:00:00.000Z | 2          |
| B           | 2021-01-04T00:00:00.000Z | 1          |
| B           | 2021-01-11T00:00:00.000Z | 1          |
| B           | 2021-01-16T00:00:00.000Z | 3          |
| B           | 2021-02-01T00:00:00.000Z | 3          |
| C           | 2021-01-01T00:00:00.000Z | 3          |
| C           | 2021-01-01T00:00:00.000Z | 3          |
| C           | 2021-01-07T00:00:00.000Z | 3          |

---
**Query #3**

    SELECT *
    FROM dannys_diner.members;

| customer_id | join_date                |
| ----------- | ------------------------ |
| A           | 2021-01-07T00:00:00.000Z |
| B           | 2021-01-09T00:00:00.000Z |

---1)	What is the total amount each customer spent at the restaurant?

**Query #4**

    SELECT 
        s.customer_id
        ,SUM(m.price) AS spend
    FROM dannys_diner.sales AS s
    LEFT JOIN dannys_diner.menu AS m
        ON s.product_id = m.product_id
    GROUP BY s.customer_id
    ORDER BY s.customer_id;

| customer_id | spend |
| ----------- | ----- |
| A           | 76    |
| B           | 74    |
| C           | 36    |

---2)	 How many days has each customer visited the restaurant?

**Query #5**

    SELECT 
        customer_id
        ,COUNT(DISTINCT order_date) AS visits
    FROM dannys_diner.sales
    GROUP BY customer_id;

| customer_id | visits |
| ----------- | ------ |
| A           | 4      |
| B           | 6      |
| C           | 2      |

---3)	What was the first item from the menu purchased by each customer?

**Query #6**

    SELECT 
        s.customer_id
        ,m.product_name
    FROM dannys_diner.menu m
    RIGHT JOIN dannys_diner.sales s
        ON m.product_id = s.product_id
    WHERE order_date = '2021-01-01'
    GROUP BY m.product_name,s.customer_id
    ORDER BY s.customer_id;

| customer_id | product_name |
| ----------- | ------------ |
| A           | curry        |
| A           | sushi        |
| B           | curry        |
| C           | ramen        |

---Using DENSE_RANK
**Query #7**

    WITH CTE AS(
      SELECT 
        customer_id
        ,order_date
        ,product_name
        ,DENSE_RANK() OVER(PARTITION BY customer_id ORDER BY order_date) AS dense_rank
    FROM dannys_diner.sales s
    RIGHT JOIN dannys_diner.menu m
        ON s.product_id = m.product_id)
    SELECT 
        customer_id
        ,product_name
    FROM CTE
    WHERE dense_rank = '1'
    GROUP BY customer_id, product_name;

| customer_id | product_name |
| ----------- | ------------ |
| A           | curry        |
| A           | sushi        |
| B           | curry        |
| C           | ramen        |

---4)	What is the most purchased item on the menu and how many times was it purchased by all customers?

**Query #8**

    WITH CTE AS
    (SELECT 
        customer_id
        ,product_id
        ,RANK() OVER(ORDER BY product_id) AS rnk
    FROM dannys_diner.sales
    )
    SELECT 
        CTE.product_id
        ,menu.product_name
        ,MAX(rnk) AS most_popular
    FROM CTE
    RIGHT JOIN dannys_diner.menu
        ON CTE.product_id = menu.product_id
    GROUP BY CTE.product_id
        ,menu.product_name
    ORDER BY most_popular DESC
    LIMIT 1;

| product_id | product_name | most_popular |
| ---------- | ------------ | ------------ |
| 3          | ramen        | 8            |

---Simpler answer to 4)

**Query #9**

    SELECT 
        product_name
        ,(COUNT(s.product_id)) AS most_purchased
    FROM dannys_diner.sales s
    LEFT JOIN dannys_diner.menu m
        ON s.product_id = m.product_id
    GROUP BY s.product_id, product_name
    ORDER BY most_purchased DESC
    LIMIT 1;

| product_name | most_purchased |
| ------------ | -------------- |
| ramen        | 8              |

---5)	Which item was the most popular for each customer?

**Query #10**

    WITH fav_item AS
    (SELECT 
        s.customer_id
        ,m.product_name
        ,COUNT(s.product_id) AS order_count
        ,DENSE_RANK() OVER(PARTITION BY s.customer_id ORDER BY COUNT(s.customer_id) DESC) AS rnk
    FROM dannys_diner.sales s
    JOIN dannys_diner.menu m
     ON s.product_id = m.product_id
    GROUP BY s.customer_id,m.product_id,m.product_name
    )
    SELECT 
        customer_id
        ,product_name
        ,order_count
    FROM fav_item
    WHERE rnk = '1';

| customer_id | product_name | order_count |
| ----------- | ------------ | ----------- |
| A           | ramen        | 3           |
| B           | ramen        | 2           |
| B           | sushi        | 2           |
| B           | curry        | 2           |
| C           | ramen        | 3           |

---6)	Which item was purchased first by the customer after they became a member?

**Query #11**

    WITH first_purchase AS (
      SELECT 
        s.customer_id
        ,s.product_id
        ,s.order_date
        ,DENSE_RANK() OVER (PARTITION BY s.customer_id ORDER BY s.order_date) AS rnk
    FROM dannys_diner.sales s
    LEFT JOIN dannys_diner.members mem
     ON s.customer_id = mem.customer_id
    WHERE s.order_date >= mem.join_date
    GROUP BY s.customer_id,s.product_id,s.order_date)
    SELECT 
        fp.customer_id
        ,fp.order_date
        ,m.product_name
    FROM first_purchase fp
    LEFT JOIN dannys_diner.menu m
        ON fp.product_id = m.product_id
    WHERE rnk = '1';

| customer_id | order_date               | product_name |
| ----------- | ------------------------ | ------------ |
| B           | 2021-01-11T00:00:00.000Z | sushi        |
| A           | 2021-01-07T00:00:00.000Z | curry        |

---7)	Which item was purchased just before the customer became a member?

**Query #12**

    WITH purchase_nonmember AS (
      SELECT 
        s.customer_id
        ,s.product_id
        ,s.order_date
        ,DENSE_RANK() OVER (PARTITION BY s.customer_id ORDER BY s.order_date DESC) AS rnk
    FROM dannys_diner.sales s
    LEFT JOIN dannys_diner.members mem
     ON s.customer_id = mem.customer_id
    WHERE s.order_date < mem.join_date
    GROUP BY s.customer_id,s.product_id,s.order_date)
    SELECT 
        pn.customer_id
        ,pn.order_date
        ,m.product_name
    FROM purchase_nonmember pn
    LEFT JOIN dannys_diner.menu m
        ON pn.product_id = m.product_id
    WHERE rnk = '1';

| customer_id | order_date               | product_name |
| ----------- | ------------------------ | ------------ |
| B           | 2021-01-04T00:00:00.000Z | sushi        |
| A           | 2021-01-01T00:00:00.000Z | sushi        |
| A           | 2021-01-01T00:00:00.000Z | curry        |

---8)	What is the total items and amount spent for each member before they became a member?

**Query #13**

    SELECT 
         s.customer_id
        ,COUNT(DISTINCT s.product_id) AS total_items
        ,SUM(mn.price) AS amount_spent
    FROM dannys_diner.sales s
    LEFT JOIN dannys_diner.members m
        ON  s.customer_id = m.customer_id
    LEFT JOIN dannys_diner.menu mn
        ON  s.product_id = mn.product_id
    WHERE s.order_date < m.join_date
    GROUP BY s.customer_id;

| customer_id | total_items | amount_spent |
| ----------- | ----------- | ------------ |
| A           | 2           | 25           |
| B           | 2           | 40           |

---9)	If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?

**Query #14**

    SELECT
        s.customer_id
        ,SUM(CASE WHEN s.product_id IN ('2','3') THEN mn.price * 10 ELSE mn.price * 20 END) AS points
    FROM dannys_diner.sales s
    LEFT JOIN dannys_diner.menu mn
     ON s.product_id = mn.product_id
    GROUP BY s.customer_id
    ORDER BY s.customer_id;

| customer_id | points |
| ----------- | ------ |
| A           | 860    |
| B           | 940    |
| C           | 360    |

---10)	In the first week after a customer joins the program (including their join date) they earn 2x points on all items, 
---not just sushi - how many points do customer A and B have at the end of January?

**Query #15**

    WITH dates AS (
      SELECT
        customer_id
        ,join_date
        ,join_date + INTERVAL'6 days' AS special_week
        ,date_trunc('month',join_date) + interval '1 month' - interval '1 day' AS end_date
    FROM dannys_diner.members
    GROUP BY customer_id,join_date)
    SELECT d.customer_id,
     SUM(CASE
      WHEN m.product_name = 'sushi' THEN 2 * 10 * m.price
      WHEN s.order_date BETWEEN d.join_date AND d.special_week THEN 2 * 10 * m.price
      ELSE 10 * m.price
      END) AS points
    FROM dates AS d
    JOIN dannys_diner.sales AS s
     ON d.customer_id = s.customer_id
    JOIN dannys_diner.menu AS m
     ON s.product_id = m.product_id
    WHERE s.order_date < d.end_date
    GROUP BY d.customer_id
    ORDER BY d.customer_id;

| customer_id | points |
| ----------- | ------ |
| A           | 1370   |
| B           | 820    |

---**BONUS QUESTIONS**

**Query #16**

    SELECT 
        s.customer_id
        ,s.order_date
        ,m.product_name
        ,m.price
        ,CASE 
        WHEN mm.join_date > s.order_date THEN 'N' 
        WHEN mm.join_date <= s.order_date THEN 'Y'
        ELSE 'N' END AS member
    FROM dannys_diner.sales s
    LEFT JOIN dannys_diner.menu m
        ON s.product_id = m.product_id
    LEFT JOIN dannys_diner.members mm
        ON mm.customer_id = s.customer_id
    ORDER BY s.customer_id,s.order_date;

| customer_id | order_date               | product_name | price | member |
| ----------- | ------------------------ | ------------ | ----- | ------ |
| A           | 2021-01-01T00:00:00.000Z | sushi        | 10    | N      |
| A           | 2021-01-01T00:00:00.000Z | curry        | 15    | N      |
| A           | 2021-01-07T00:00:00.000Z | curry        | 15    | Y      |
| A           | 2021-01-10T00:00:00.000Z | ramen        | 12    | Y      |
| A           | 2021-01-11T00:00:00.000Z | ramen        | 12    | Y      |
| A           | 2021-01-11T00:00:00.000Z | ramen        | 12    | Y      |
| B           | 2021-01-01T00:00:00.000Z | curry        | 15    | N      |
| B           | 2021-01-02T00:00:00.000Z | curry        | 15    | N      |
| B           | 2021-01-04T00:00:00.000Z | sushi        | 10    | N      |
| B           | 2021-01-11T00:00:00.000Z | sushi        | 10    | Y      |
| B           | 2021-01-16T00:00:00.000Z | ramen        | 12    | Y      |
| B           | 2021-02-01T00:00:00.000Z | ramen        | 12    | Y      |
| C           | 2021-01-01T00:00:00.000Z | ramen        | 12    | N      |
| C           | 2021-01-01T00:00:00.000Z | ramen        | 12    | N      |
| C           | 2021-01-07T00:00:00.000Z | ramen        | 12    | N      |

---
**Query #17**

    WITH CTE AS (
      SELECT 
        s.customer_id
        ,s.order_date
        ,m.product_name
        ,m.price
        ,CASE 
        WHEN mm.join_date > s.order_date THEN 'N' 
        WHEN mm.join_date <= s.order_date THEN 'Y'
        ELSE 'N' END AS member
    FROM dannys_diner.sales s
    LEFT JOIN dannys_diner.menu m
        ON s.product_id = m.product_id
    LEFT JOIN dannys_diner.members mm
        ON mm.customer_id = s.customer_id
    ORDER BY s.customer_id,s.order_date
      )
    SELECT *
        ,CASE WHEN member = 'N' THEN Null 
        ELSE
        RANK()OVER(PARTITION BY customer_id,member ORDER BY order_date) END AS ranking
    FROM CTE;

| customer_id | order_date               | product_name | price | member | ranking |
| ----------- | ------------------------ | ------------ | ----- | ------ | ------- |
| A           | 2021-01-01T00:00:00.000Z | sushi        | 10    | N      |         |
| A           | 2021-01-01T00:00:00.000Z | curry        | 15    | N      |         |
| A           | 2021-01-07T00:00:00.000Z | curry        | 15    | Y      | 1       |
| A           | 2021-01-10T00:00:00.000Z | ramen        | 12    | Y      | 2       |
| A           | 2021-01-11T00:00:00.000Z | ramen        | 12    | Y      | 3       |
| A           | 2021-01-11T00:00:00.000Z | ramen        | 12    | Y      | 3       |
| B           | 2021-01-01T00:00:00.000Z | curry        | 15    | N      |         |
| B           | 2021-01-02T00:00:00.000Z | curry        | 15    | N      |         |
| B           | 2021-01-04T00:00:00.000Z | sushi        | 10    | N      |         |
| B           | 2021-01-11T00:00:00.000Z | sushi        | 10    | Y      | 1       |
| B           | 2021-01-16T00:00:00.000Z | ramen        | 12    | Y      | 2       |
| B           | 2021-02-01T00:00:00.000Z | ramen        | 12    | Y      | 3       |
| C           | 2021-01-01T00:00:00.000Z | ramen        | 12    | N      |         |
| C           | 2021-01-01T00:00:00.000Z | ramen        | 12    | N      |         |
| C           | 2021-01-07T00:00:00.000Z | ramen        | 12    | N      |         |

---

[View on DB Fiddle](https://www.db-fiddle.com/f/2rM8RAnq7h5LLDTzZiRWcd/138)
